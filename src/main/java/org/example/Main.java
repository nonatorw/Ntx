package org.example;

import org.example.models.CustomerModel;
import org.example.models.JoinModel;
import org.example.models.PersonModel;
import org.example.repositories.load.CustomersLoadRepository;
import org.example.repositories.load.PeopleLoadRepository;
import org.example.repositories.write.JoinRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Main {

    private static final String PORTUGAL = "Portugal";
    private static final PeopleLoadRepository peopleRepository = new PeopleLoadRepository();
    private static final CustomersLoadRepository customersLoadRepository = new CustomersLoadRepository();
    private static final JoinRepository joinRepository = new JoinRepository();
    private static final String EMPTY = "";

    public static void main(String[] args) {

        //TODO: You have 5 min to do the topic '3. Getting data from file “people.csv"'. Beware of bad practices!
        String endMSG =
                //TODO: Read the “people.csv” file
                peopleRepository.load().stream()
                //TODO: Set, to all person that is older 30 years, the COUNTRY value to null (java null).
                .map(personModel -> {
                    if (personModel.getAge() > 30) {
                        personModel.setCountry(null);
                    }
                    return personModel;
                })
                //TODO:     Find the first line that in the column “COUNTRY” is the value “France”, replace the value to “Portugal”, and then print it on screen.
                //          Don't forget! If you don't find any row with the expected value, print:
                //          String endMSG = new PersonModel(0, "", "", 0, "", "").toString();
                .filter(personModel -> personModel.getCountry().equals("France"))
                //! Shit! Part of this logic is not correct, the junior dev did a big mistake!!!
                //! Refactor this block.
                .peek(personModel -> personModel.setCountry(PORTUGAL))
                .map(personModel -> new PersonModel(0, EMPTY, EMPTY, 0, EMPTY, EMPTY))
                .collect(Collectors.toList()).get(0)
                //! DONE
                .toString();

        //! DONE
        System.out.println(endMSG);




        // -----
        //! Just to you don't delete, because we need to use on topic 5.
        List<JoinModel> joinList = new ArrayList<>();
        // -----

        //TODO:    You have 15 min to merge the two tables generated by reading the files. Return all records from the left table (people.csv) and the corresponding records from the right table (customers.csv), where the key is the column people.COUNTRY = customers.Country.
        //  Example:
        //  - Table1 (KEY, NAME):
        //  1, Silva
        //  2, Miranda
        //  3, Oliveira
        //  - Table2 (KEY, JOB):
        //  1, Dev
        //  1, Ops
        //  3, Msg
        //  - JOIN per KEY (KEY, NAME, JOB):
        //  1, Silva, Dev
        //  1, Silva, Ops
        //  2, Miranda,
        //  3, Oliveira, Msg
        //  ---
        //  TIP: Remember how computationally a database works. What is the most important thing it does before a JOIN (left, right, inner, full...) in database computing logic?

        List<PersonModel> peopleCSVList = peopleRepository.load(); //! Left table (Table1)
        List<CustomerModel> customersCSVList = customersLoadRepository.load(); //! Right table (Table2)
        //! You can create any new collections if necessary to solve the problem

        //! SEE:    The class JoinModel(@NotNull PersonModel personModel, CustomerModel customerModel)
        //! SEE:    The joinList is a list of JoinModel to be written on a file using the method joinRepository.save(joinList)
        joinList = peopleCSVList.stream()
                //! This is an example to use the JoinModel, not a real join
                .map(personModel -> new JoinModel(personModel, null))
                //! Generate the list of JoinModels
                .collect(Collectors.toList());




        // -----
        //TODO: 5.	Writing the merging of tables
        //! SEE:    The class JoinRepository
        joinRepository.save(joinList);
        //! DONE

    }
}